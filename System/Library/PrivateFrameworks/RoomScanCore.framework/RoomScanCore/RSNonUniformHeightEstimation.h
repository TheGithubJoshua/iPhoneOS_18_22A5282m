@interface RSNonUniformHeightEstimation : NSObject {
    struct vector<float __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__begin_; void *__end_; struct __compressed_pair<float * __attribute__((ext_vector_type(3))), std::allocator<float __attribute__((ext_vector_type(3)))>> { void *__value_; } __end_cap_; } _camera_positions;
    struct NonUniformHeightEstimation { double _floor_global_value; double _ceiling_global_value; struct unordered_map<std::string, PointsLine, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, PointsLine>>> { struct __hash_table<std::__hash_value_type<std::string, PointsLine>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PointsLine>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PointsLine>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, PointsLine>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, PointsLine>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, PointsLine>, std::hash<std::string>, std::equal_to<std::string>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, PointsLine>, std::equal_to<std::string>, std::hash<std::string>, true>> { float __value_; } __p3_; } __table_; } _line_points; struct unordered_map<std::string, IndividualWallHeightStruct, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, IndividualWallHeightStruct>>> { struct __hash_table<std::__hash_value_type<std::string, IndividualWallHeightStruct>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IndividualWallHeightStruct>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IndividualWallHeightStruct>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, IndividualWallHeightStruct>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IndividualWallHeightStruct>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IndividualWallHeightStruct>, std::hash<std::string>, std::equal_to<std::string>, true>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IndividualWallHeightStruct>, std::equal_to<std::string>, std::hash<std::string>, true>> { float __value_; } __p3_; } __table_; } _individual_wall_height; struct vector<SegmentsInfo, std::allocator<SegmentsInfo>> { struct SegmentsInfo *__begin_; struct SegmentsInfo *__end_; struct __compressed_pair<SegmentsInfo *, std::allocator<SegmentsInfo>> { struct SegmentsInfo *__value_; } __end_cap_; } _valid_line_segments; } _heightEstimation;
    BOOL _isNonUniformHeightEnabled;
}

- (id)init;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)reset;
- (id)runWithFloorPlan:(id)a0 semanticImage:(id)a1 heightImage:(id)a2 geometryMeta:(id)a3 temporalMeta:(id)a4;
- (void)setNonUniformHeightEnable:(BOOL)a0;

@end
