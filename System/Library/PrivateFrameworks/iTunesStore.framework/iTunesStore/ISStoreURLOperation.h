@class SSURLBagContext, SSVFairPlaySAPSession, SSBag, NSString, NSNumber, SSBiometricAuthenticationContext;
@protocol ISBiometricSessionDelegate, ISStoreURLOperationDelegate;

@interface ISStoreURLOperation : ISURLOperation <ISBiometricSessionDelegate> {
    long long _activeMachineDataStyle;
    BOOL _canSendGUIDParameter;
    BOOL _ignorePreexistingSecureToken;
    SSVFairPlaySAPSession *_sapSession;
    BOOL _shouldSendXTokenHeader;
}

@property (retain) NSNumber *authenticatedDSID;
@property (nonatomic) BOOL ignorePreexistingSecureToken;
@property (weak) id<ISStoreURLOperationDelegate> delegate;
@property (weak) id<ISBiometricSessionDelegate> biometricSessionDelegate;
@property (retain) SSBiometricAuthenticationContext *biometricAuthenticationContext;
@property BOOL canSendGUIDParameter;
@property long long machineDataStyle;
@property BOOL needsURLBag;
@property BOOL needsAuthentication;
@property BOOL needsTermsAndConditionsAcceptance;
@property BOOL performsMachineDataActions;
@property (retain) SSVFairPlaySAPSession *SAPSession;
@property (nonatomic) BOOL shouldAppendAuthKitHeaders;
@property (nonatomic) BOOL shouldAppendStorefrontToURL;
@property BOOL shouldCancelBiometricTokenUpdate;
@property BOOL shouldSuppressUserInfo;
@property BOOL shouldSendAKClientInfoHeaders;
@property BOOL shouldSendAKPRKRequestHeader;
@property BOOL shouldSendDSIDHeader;
@property BOOL shouldSendXTokenHeader;
@property BOOL useUserSpecificURLBag;
@property BOOL urlKnownToBeTrusted;
@property (retain, nonatomic) SSBag *bag;
@property (readonly) SSURLBagContext *URLBagContext;
@property (nonatomic, getter=isURLBagRequest) BOOL URLBagRequest;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)_handleResponseHeaders:(id)a0 response:(id)a1 request:(id)a2 account:(id)a3 performsMachineDataActions:(BOOL)a4 shouldRetry:(BOOL *)a5;
+ (id)_storeFrontIdentifierForAccount:(id)a0;
+ (void)_appendStorefront:(id)a0 toRequestURL:(id)a1;
+ (void)_addAccountDSID:(id)a0 toRequest:(id)a1;
+ (void)_addiTunesStoreHeadersToRequest:(id)a0 withAccount:(id)a1 appendAuthKitHeaders:(BOOL)a2 appendStorefrontToURL:(BOOL)a3 clientBundleIdentifier:(id)a4 extraHeaders:(id)a5 storefrontSuffix:(id)a6;
+ (id)_ssBag_copyHeaderPatternsFromBag:(id)a0;
+ (void)_addiTunesStoreHeadersToRequest:(id)a0 withURLBag:(id)a1 accountIdentifier:(id)a2 appendAuthKitHeaders:(BOOL)a3 appendStorefrontToURL:(BOOL)a4 clientBundleIdentifier:(id)a5;
+ (void)handleITunesStoreResponseHeaders:(id)a0 request:(id)a1 withAccountIdentifier:(id)a2 shouldRetry:(BOOL *)a3;
+ (id)propertyListOperationWithURLBagKey:(id)a0;
+ (id)pingOperationWithUrl:(id)a0;
+ (BOOL)_operationWaitsForPurchases:(id)a0;
+ (void)_addiTunesStoreHeadersToRequest:(id)a0 withSSBag:(id)a1 accountIdentifier:(id)a2 appendAuthKitHeaders:(BOOL)a3 appendStorefrontToURL:(BOOL)a4 clientBundleIdentifier:(id)a5;
+ (id)_authKitSession;
+ (void)_addiTunesStoreHeadersToRequest:(id)a0 withSSBag:(id)a1 account:(id)a2 appendAuthKitHeaders:(BOOL)a3 appendStorefrontToURL:(BOOL)a4 clientBundleIdentifier:(id)a5;
+ (id)itemPingOperationWithIdentifier:(unsigned long long)a0 urlBagKey:(id)a1;
+ (void)addITunesStoreHeadersToRequest:(id)a0 withAccountIdentifier:(id)a1;
+ (void)_performMachineDataRequest:(id)a0 requestProperties:(id)a1 completion:(id /* block */)a2;
+ (void)_addPrimaryiCloudDSIDToRequest:(id)a0;
+ (void)_addiTunesStoreHeadersToRequest:(id)a0 withURLBag:(id)a1 account:(id)a2 appendAuthKitHeaders:(BOOL)a3 appendStorefrontToURL:(BOOL)a4 clientBundleIdentifier:(id)a5;
+ (id)_restrictionsHeaderValue;
+ (id)_ssBag_copyExtraHeadersForURL:(id)a0 bag:(id)a1;

- (id)_absintheHeaders;
- (id)_ssBag_copyGUIDSchemesFromBag:(id)a0;
- (id)_copyAuthenticationContextForAttemptNumber:(long long)a0;
- (void)_setStoreFrontIdentifier:(id)a0 isTransient:(BOOL)a1;
- (id)_account;
- (id)_urlBagForContext:(id)a0;
- (BOOL)_processResponseData:(id)a0 error:(id *)a1;
- (id)init;
- (BOOL)_isErrorTokenError:(id)a0;
- (void)_applyAnalyticsCookiesToRequest:(id)a0 withBag:(id)a1 oldBag:(id)a2;
- (BOOL)_ssBag_shouldSendGUIDForURL:(id)a0 withBag:(id)a1;
- (void)_continueTouchIDSession;
- (void)_willSendRequest:(id)a0;
- (BOOL)_performMachineDataRequest:(id)a0;
- (BOOL)_canSendTokenToURL:(id)a0;
- (void)_addStandardQueryParametersForURL:(id)a0;
- (BOOL)_authenticateWithContext:(id)a0 error:(id *)a1;
- (void)_runURLOperation;
- (BOOL)handleRedirectFromDataProvider:(id)a0 error:(id *)a1;
- (id)authenticatedAccountDSID;
- (BOOL)_shouldRetryForTouchIDChallengeWithError:(id)a0;
- (BOOL)_shouldRetryForAbsintheWithResponse:(id)a0;
- (id)logKey;
- (id)_resolvedURLInBagContext:(id)a0 bagTrusted:(BOOL *)a1;
- (BOOL)shouldFollowRedirectWithRequest:(id)a0 returningError:(id *)a1;
- (void)sender:(id)a0 didFallbackToPassword:(BOOL)a1;
- (id)_copyAuthenticationContext;
- (id)newRequestWithURL:(id)a0;
- (id)_buyParams;
- (id)_loadURLBagInterpreterWithRequest:(id)a0 requestProperties:(id)a1;
- (id)_ssBag_copyGUIDPatternsFromBag:(id)a0;
- (void)handleResponse:(id)a0;
- (void).cxx_destruct;
- (void)run;

@end
