@class UIView, NSString, NSArray, UIWindow, UIKBTree, UILexicon, UIAlertController, UILabel;

@interface UIKeyboardLayoutCursor : UIKeyboardLayoutStar <UIKBAlertControllerDelegate> {
    UIKBTree *_indirectKeyboard;
    UIView *_selectionView;
    NSArray *_keyplaneKeys;
    long long _selectedKeyIndex;
    BOOL _ignoreEventsUntilPressEnds;
    UILexicon *_recentInputs;
    BOOL _disableTouchInput;
    UIKBTree *_cachedMultitapKeyplane;
    BOOL _cachedCanMultitap;
    UILabel *_dictationHelpLabel;
    BOOL _didVariantDelete;
    BOOL _isForwardingEvent;
    int _overridenSelectedKeyType;
    struct CGPoint { double x; double y; } _keyplaneSwitchSelectedKeyFrameCenter;
    BOOL _selectInitialKey;
}

@property (retain, nonatomic) UIAlertController *recentInputsAlert;
@property (retain, nonatomic) NSString *keyplaneBeforeDictation;
@property (nonatomic) long long selectedKeyBeforeDictation;
@property (nonatomic) BOOL suppressOperations;
@property (nonatomic) BOOL overrideInitialKey;
@property (nonatomic) unsigned long long lastSelectedKeyIndex;
@property (nonatomic) BOOL shouldConfigureFloatingContentView;
@property (nonatomic) BOOL shouldToggleLetterCaseNext;
@property (readonly, nonatomic, getter=isSlimLinearKeyboardTV) BOOL slimLinearKeyboardTV;
@property (weak, nonatomic) UIWindow *focusWindow;
@property (readonly, nonatomic) UIKBTree *currentKey;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (struct CGSize { double x0; double x1; })keyboardSizeForInputMode:(id)a0 screenTraits:(id)a1 keyboardType:(long long)a2;
+ (id)carKeyboardNameForKeyboard:(id)a0 screenTraits:(id)a1;

- (id)getRomanAccentVariantsForString:(id)a0 inputMode:(id)a1 keyboardVariantIndludes:(int)a2;
- (void)longPressAction;
- (BOOL)shouldPreventInputManagerHitTestingForKey:(id)a0;
- (void)setRecentInputs:(id)a0;
- (void)remoteControlReceivedWithEvent:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })selectionFrameForKeyIndex:(long long)a0;
- (BOOL)refreshSelectedCellIfNecessaryForKey:(id)a0;
- (void)updateKeyplaneSwitchEdgeBiases;
- (void)handleVariantDeleteIfNecessaryForKey:(id)a0;
- (unsigned long long)_indexOfFirstKeyPassingTest:(id /* block */)a0;
- (void)showKeyboardWithInputTraits:(id)a0 screenTraits:(id)a1 splitTraits:(id)a2;
- (long long)defaultSelectedVariantIndexForKey:(id)a0 withActions:(unsigned long long)a1;
- (void)runWithSuppressedActions:(id /* block */)a0;
- (id)keyViewAnimator;
- (BOOL)shouldAllowCurrentKeyplaneReload;
- (BOOL)shouldMatchCaseForDomainKeys;
- (void)setCursorLocation:(unsigned long long)a0;
- (void)setDisableTouchInput:(BOOL)a0;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (void)endMultitapForKey:(id)a0;
- (BOOL)_handlePhysicalButtonEvent:(id)a0;
- (BOOL)isKeyplaneDisabledWithName:(id)a0;
- (void)updateDictationHelpString;
- (BOOL)_handleMoveWithEvent:(id)a0;
- (long long)targetKeyIndexFromPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)diacriticForwardCompose;
- (BOOL)isPossibleToTypeFast;
- (BOOL)isAppRightToLeft;
- (BOOL)_handleWheelChangedWithEvent:(id)a0;
- (void)setHighlightedVariantIndex:(long long)a0 key:(id)a1;
- (BOOL)supportsEmoji;
- (void)didSelectRecentInputString:(id)a0;
- (int)activeStateForKey:(id)a0;
- (void)setKeyboardName:(id)a0 appearance:(long long)a1;
- (BOOL)handleLinearDirectionalInput:(int)a0;
- (id)_keyplaneForKeyplaneProperties;
- (BOOL)shouldDeactivateWithoutWindow;
- (int)stateForKeyplaneSwitchKey:(id)a0;
- (unsigned char)getHandRestRecognizerState;
- (BOOL)handleVisualDirectionalInput:(int)a0;
- (void)returnToKeyplaneAfterDictation;
- (int)stateForCandidateListKey:(id)a0;
- (void)configureFloatingContentViewsIfNeeded;
- (void)updateRecentInputsKeyIfNecessary;
- (unsigned long long)variantCountForKey:(id)a0;
- (BOOL)_isDirectionalHeading:(unsigned long long)a0;
- (BOOL)isKanaPlane;
- (id)keyHitTestInSameRowAsCenter:(struct CGPoint { double x0; double x1; })a0 size:(struct CGSize { double x0; double x1; })a1;
- (void)acceptRecentInputIfNecessary;
- (int)enabledStateForKey:(id)a0;
- (BOOL)shouldRetestKey:(id)a0 slidOffKey:(id)a1 withKeyplane:(id)a2;
- (void)_moveWithEvent:(id)a0;
- (void)setRenderConfig:(id)a0;
- (BOOL)usesAutoShift;
- (void)deactivateKey:(id)a0;
- (void)clearVariantStateForKey:(id)a0;
- (double)defaultCursorAdjustDistance;
- (BOOL)shouldMergeKey:(id)a0;
- (void)_wheelChangedWithEvent:(id)a0;
- (long long)targetKeyIndexFromPoint:(struct CGPoint { double x0; double x1; })a0 inKeys:(id)a1;
- (BOOL)isAlphabeticPlane;
- (BOOL)canMultitap;
- (void)restoreFocusFromEntryPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)showPopupKeyplaneSwitcher;
- (BOOL)_handleRemoteControlReceivedWithEvent:(id)a0;
- (BOOL)canHandleEvent:(id)a0;
- (unsigned long long)cursorLocation;
- (void)switchToDictationKeyplaneWithActivationIdentifier:(id)a0;
- (unsigned long long)downActionFlagsForKey:(id)a0;
- (void)flushKeyCache:(id)a0;
- (BOOL)refreshSelectedCellIfNecessaryForKey:(id)a0 animated:(BOOL)a1;
- (void)alertDidDismiss;
- (BOOL)_isKeyboardReverseOfAppLayoutDirection;
- (void)setKeyplaneName:(id)a0;
- (BOOL)supportsContinuousPath;
- (BOOL)_menuTapShouldExitVariants;
- (void)setShift:(BOOL)a0;
- (BOOL)ignoresShiftState;
- (id)cacheTokenForKeyplane:(id)a0;
- (void)selectInitialKeyIfNecessary;
- (void)showRecentInputsAlert;
- (BOOL)shouldToggleKeyplaneWithName:(id)a0;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setKeyboardAppearance:(long long)a0;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (unsigned long long)getNextKeyplaneIndex:(unsigned long long)a0;
- (void)setSelectedKeyIndex:(long long)a0;
- (void).cxx_destruct;
- (BOOL)isKeyboardRightToLeft;
- (long long)targetKeyIndexAtOffset:(struct CGPoint { double x0; double x1; })a0 fromKey:(id)a1;
- (void)dealloc;
- (void)willMoveToWindow:(id)a0;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (void)pressesChanged:(id)a0 withEvent:(id)a1;
- (void)takeKeyAction:(id)a0;

@end
