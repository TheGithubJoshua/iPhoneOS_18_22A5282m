@class _UISupplementalLexicon, _UIFullFontSize, UITapGestureRecognizer, NSDictionary, UIInputContextHistory, UIScrollView, _UICascadingTextStorage, UITextInputAssistantItem, UITextRange, UIFont, CUICatalog, UIDragInteraction, NSIndexSet, _UIFloatingContentView, UIDropInteraction, NSTextContainer, UIButton, UIColor, CUIStyleEffectConfiguration, _UITextFieldBackgroundProvider, UITextPosition, UITextInteractionAssistant, UIVisualEffectView, UIView, _UITextLayoutControllerBase, NSMutableDictionary, NSAttributedString, UITraitCollection, NSString, UIPasteConfiguration, UITextFieldLabel, NSLayoutManager, UIImageView, _UITextStorageDraggableGeometry, UIFieldEditor, UILabel, UITextInputTraits, NSTextStorage, RTIInputSystemSourceSession, UITextInputPasswordRules, _UITextFieldClearButton, UIImage, _UITextFieldVisualStyle;
@protocol UITextDragDropSupport, UITextInputSuggestionDelegate, UITextInputTokenizer, _UITextLayoutController, UITextPasteDelegate, UITextDropDelegate, UITextDragDelegate, _UITextCanvas, _UITextFieldMetricsProvider, UITextInputDelegate;

@interface UITextField : UIControl <_UIViewBaselineSpacing, UIKeyboardInput, _UILayoutBaselineUpdating, _UIFloatingContentViewDelegate, UIGestureRecognizerDelegate, _UITextFieldVisualStyleSubject, UIViewGhostedRangeSupporting, _UITextFieldClearButtonImageProviding, UIPopoverControllerDelegate, UITextFieldContent, _UITextFieldCanvasContext, UIKeyInputPrivate, _UIFieldEditorHostingViewRequirements, UITextDragSupporting, UITextDropSupporting, UITextPasteConfigurationSupporting_Internal, UITextDroppable_Private, UITextInputPrivate, UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting, UITextInput, NSCoding, UIContentSizeCategoryAdjusting> {
    UIView *_contentCoverView;
    long long _contentCoverViewMode;
    UIView *_backgroundCoverView;
    long long _backgroundCoverViewMode;
    double _foregroundViewsAlpha;
    UITextInputTraits *_traits;
    UITextInputTraits *_nonAtomTraits;
    _UIFullFontSize *_fullFontSize;
    int _controlSize;
    struct UIEdgeInsets { double top; double left; double bottom; double right; } _padding;
    _UITextFieldClearButton *_clearButton;
    struct CGSize { double width; double height; } _clearButtonOffset;
    NSMutableDictionary *_cachedDefaultClearButtonImages;
    struct CGSize { double width; double height; } _leftViewOffset;
    struct CGSize { double width; double height; } _rightViewOffset;
    _UIFloatingContentView *_floatingContainerView;
    UIVisualEffectView *_contentBackdropView;
    UITextFieldLabel *_placeholderLabel;
    UITextFieldLabel *_suffixLabel;
    UITextFieldLabel *_prefixLabel;
    UIImageView *_iconView;
    UILabel *_label;
    double _labelOffset;
    NSAttributedString *_overriddenPlaceholder;
    long long _overriddenPlaceholderAlignment;
    BOOL _forceDisplayOverridePlaceholder;
    UITextInteractionAssistant *_interactionAssistant;
    UITapGestureRecognizer *_selectGestureRecognizer;
    UIFieldEditor *_fieldEditor;
    NSTextContainer *_textContainer;
    _UICascadingTextStorage *_textStorage;
    _UITextLayoutControllerBase<_UITextLayoutController> *_textLayoutController;
    NSDictionary *_linkTextAttributes;
    UIView *_inputAccessoryView;
    UIView *_recentsAccessoryView;
    UITextInputAssistantItem *_inputAssistantItem;
    id<UITextDragDropSupport> _textDragDropSupport;
    _UITextStorageDraggableGeometry *_draggableGeometry;
    struct { unsigned char verticallyCenterText : 1; unsigned char isAnimating : 4; unsigned char becomesFirstResponderOnClearButtonTap : 1; unsigned char clearsPlaceholderOnBeginEditing : 1; unsigned char adjustsFontSizeToFitWidth : 1; unsigned char fieldEditorAttached : 1; unsigned char canBecomeFirstResponder : 1; unsigned char shouldSuppressShouldBeginEditing : 1; unsigned char inResignFirstResponder : 1; unsigned char undoDisabled : 1; unsigned char explicitAlignment : 1; unsigned char implementsCustomDrawing : 1; unsigned char suppressContentChangedNotification : 1; unsigned char allowsEditingTextAttributes : 1; unsigned char usesAttributedText : 1; unsigned char clearingBehavior : 2; unsigned char overridePasscodeStyle : 1; unsigned char shouldResignWithoutUpdate : 1; unsigned char blurEnabled : 1; unsigned char visualEffectViewEnabled : 1; unsigned char disableFocus : 1; unsigned char disableRemoteTextEditing : 1; unsigned char allowsAttachments : 1; unsigned char isReceivingDrop : 1; unsigned char contentCoverUnsecuresText : 1; unsigned char forcesClearButtonHighContrastAppearance : 1; unsigned char contentInsetsFromFontsValid : 1; unsigned char autolayoutWantsBaselines : 1; unsigned char animateNextHighlightChange : 1; unsigned char backgroundProviderDraws : 1; unsigned char backgroundProviderHasBackgroundView : 1; unsigned char isHandlingClearButton : 1; unsigned char textLayoutManagerEnabled : 1; unsigned char shouldDisplayDictationPlaceholderMessage : 1; unsigned char supportsKeyboardNavigationForSuggestions : 1; } _textFieldFlags;
    double _firstBaselineOffsetFromTop;
    double _lastBaselineOffsetFromBottom;
    BOOL _didInvalidateBaselineConstraintsOnHeightChange;
    BOOL _deferringBecomeFirstResponder;
    long long _preferredBorderStyle;
    double _preferredBackgroundCornerRadius;
    _UITextFieldBackgroundProvider *_backgroundProvider;
    id<_UITextFieldMetricsProvider> _metricsProvider;
    UIView<_UITextCanvas> *_textCanvasView;
    CUICatalog *_cuiCatalog;
    CUIStyleEffectConfiguration *_cuiStyleEffectConfiguration;
}

@property (copy, nonatomic, setter=_setInteractionState:) id _interactionState;
@property (copy, nonatomic) id interactionState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) BOOL _tvUseVibrancy;
@property (retain, nonatomic) UIColor *_tvCustomTextColor;
@property (retain, nonatomic) UIColor *_tvCustomFocusedTextColor;
@property (nonatomic) BOOL _disableTextColorUpdateOnTraitCollectionChange;
@property (retain, nonatomic) _UITextFieldVisualStyle *visualStyle;
@property (copy, nonatomic, setter=_dci_setEditingMenuProvider:) id /* block */ _dci_editingMenuProvider;
@property (retain) UIView *recentsAccessoryView;
@property (retain, nonatomic, getter=_cuiCatalog, setter=_setCuiCatalog:) CUICatalog *_cuiCatalog;
@property (retain, nonatomic, getter=_cuiStyleEffectConfiguration, setter=_setCuiStyleEffectConfiguration:) CUIStyleEffectConfiguration *_cuiStyleEffectConfiguration;
@property BOOL clearsPlaceholderOnBeginEditing;
@property (readonly, nonatomic) UIFieldEditor *_fieldEditor;
@property (nonatomic, setter=_setRoundedRectBackgroundCornerRadius:) double _roundedRectBackgroundCornerRadius;
@property (readonly, nonatomic) UILabel *_placeholderLabel;
@property (nonatomic, setter=_setShouldDisplayDictationPlaceholderMessage:) BOOL _shouldDisplayDictationPlaceholderMessage;
@property (readonly, nonatomic) UIButton *_clearButton;
@property (nonatomic, getter=_forcesClearButtonHighContrastAppearance, setter=_setForcesClearButtonHighContrastAppearance:) BOOL forcesClearButtonHighContrastAppearance;
@property (nonatomic, getter=isUndoEnabled) BOOL undoEnabled;
@property (readonly, nonatomic) NSString *searchText;
@property (nonatomic, setter=_setPadding:) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } _padding;
@property (nonatomic) long long clearingBehavior;
@property (nonatomic) int controlSize;
@property (retain, nonatomic) UIColor *shadowColor;
@property (nonatomic) struct CGSize { double x0; double x1; } shadowOffset;
@property (nonatomic) double shadowBlur;
@property (nonatomic, getter=_passcodeStyleAlpha, setter=_setPasscodeStyleAlpha:) double _passcodeStyleAlpha;
@property (nonatomic, getter=_overridePasscodeStyle, setter=_setOverridePasscodeStyle:) BOOL _overridePasscodeStyle;
@property (nonatomic, getter=_handwritingEnabled, setter=_setHandwritingEnabled:) BOOL _handwritingEnabled;
@property (retain, nonatomic) UITextInputAssistantItem *inputAssistantItem;
@property (nonatomic, getter=_supportsKeyboardNavigationForSuggestions, setter=_setSupportsKeyboardNavigationForSuggestions:) BOOL supportsKeyboardNavigationForSuggestions;
@property (copy, nonatomic) NSDictionary *linkTextAttributes;
@property (nonatomic) long long nonEditingLinebreakMode;
@property (copy, nonatomic) NSString *text;
@property (copy, nonatomic) NSAttributedString *attributedText;
@property (retain, nonatomic) UIColor *textColor;
@property (retain, nonatomic) UIFont *font;
@property (nonatomic) long long textAlignment;
@property (nonatomic) long long borderStyle;
@property (copy, nonatomic) NSDictionary *defaultTextAttributes;
@property (copy, nonatomic) NSString *placeholder;
@property (copy, nonatomic) NSAttributedString *attributedPlaceholder;
@property (nonatomic) BOOL clearsOnBeginEditing;
@property (nonatomic) BOOL adjustsFontSizeToFitWidth;
@property (nonatomic) double minimumFontSize;
@property (weak, nonatomic) id delegate;
@property (retain, nonatomic) UIImage *background;
@property (retain, nonatomic) UIImage *disabledBackground;
@property (readonly, nonatomic, getter=isEditing) BOOL editing;
@property (nonatomic) BOOL allowsEditingTextAttributes;
@property (copy, nonatomic) NSDictionary *typingAttributes;
@property (nonatomic) long long clearButtonMode;
@property (retain, nonatomic) UIView *leftView;
@property (nonatomic) long long leftViewMode;
@property (retain, nonatomic) UIView *rightView;
@property (nonatomic) long long rightViewMode;
@property (retain) UIView *inputView;
@property (retain) UIView *inputAccessoryView;
@property (nonatomic) BOOL clearsOnInsertion;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIView *_contentView;
@property (nonatomic) BOOL allowsAttachments;
@property (readonly, nonatomic) _UITextLayoutControllerBase<_UITextLayoutController> *textLayoutController;
@property (readonly, nonatomic) NSTextStorage *textStorage;
@property (readonly, nonatomic) NSTextContainer *textContainer;
@property (readonly, nonatomic) NSLayoutManager *layoutManager;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } textContainerOrigin;
@property (readonly, nonatomic) UIScrollView *enclosingScrollView;
@property (readonly, nonatomic, getter=isEditable) BOOL editable;
@property (readonly, nonatomic) struct CGPoint { double x0; double x1; } drawingScale;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } _clipRectForFadedEdges;
@property (readonly, nonatomic) BOOL hasText;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic) long long spellCheckingType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long keyboardType;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long returnKeyType;
@property (nonatomic) BOOL enablesReturnKeyAutomatically;
@property (nonatomic, getter=isSecureTextEntry) BOOL secureTextEntry;
@property (copy, nonatomic) NSString *textContentType;
@property (copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property (readonly, nonatomic) UIView *_backgroundView;
@property (readonly, nonatomic) BOOL _fieldEditorAttached;
@property (readonly, nonatomic) BOOL _hasContent;
@property (readonly, nonatomic) long long _blurEffectStyleForAppearance;
@property (readonly, nonatomic) UITraitCollection *traitCollection;
@property (copy) UITextRange *selectedTextRange;
@property (readonly, nonatomic) UITextRange *markedTextRange;
@property (copy, nonatomic) NSDictionary *markedTextStyle;
@property (readonly, nonatomic) UITextPosition *beginningOfDocument;
@property (readonly, nonatomic) UITextPosition *endOfDocument;
@property (weak, nonatomic) id<UITextInputDelegate> inputDelegate;
@property (readonly, nonatomic) id<UITextInputTokenizer> tokenizer;
@property (readonly, nonatomic) UIView *textInputView;
@property (nonatomic) long long selectionAffinity;
@property (readonly, nonatomic) id insertDictationResultPlaceholder;
@property (weak, nonatomic) id<UITextDragDelegate> textDragDelegate;
@property (readonly, nonatomic) UIDragInteraction *textDragInteraction;
@property (readonly, nonatomic, getter=isTextDragActive) BOOL textDragActive;
@property (nonatomic) long long textDragOptions;
@property (nonatomic) struct CGPoint { double x0; double x1; } contentOffsetForSameViewDrops;
@property (weak, nonatomic) id<UITextDropDelegate> textDropDelegate;
@property (readonly, nonatomic) UIDropInteraction *textDropInteraction;
@property (readonly, nonatomic, getter=isTextDropActive) BOOL textDropActive;
@property (weak, nonatomic) id<UITextPasteDelegate> pasteDelegate;
@property (copy, nonatomic) UIPasteConfiguration *pasteConfiguration;
@property (nonatomic) BOOL usesStandardTextScaling;
@property (readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic) long long selectionGranularity;
@property (readonly, nonatomic) long long cursorBehavior;
@property (readonly, nonatomic) id<UITextInputSuggestionDelegate> textInputSuggestionDelegate;
@property (nonatomic) long long _textInputSource;
@property (readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property (readonly, nonatomic) BOOL supportsImagePaste;
@property (copy, nonatomic) NSString *recentInputIdentifier;
@property (nonatomic) struct _NSRange { unsigned long long x0; unsigned long long x1; } validTextRange;
@property (copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property (nonatomic) struct __CFCharacterSet { } *textTrimmingSet;
@property (retain, nonatomic) UIColor *insertionPointColor;
@property (retain, nonatomic) UIColor *selectionBarColor;
@property (retain, nonatomic) UIColor *selectionHighlightColor;
@property (retain, nonatomic) UIImage *selectionDragDotImage;
@property (retain, nonatomic) UIColor *selectionBorderColor;
@property (nonatomic) double selectionBorderWidth;
@property (nonatomic) double selectionCornerRadius;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } selectionEdgeInsets;
@property (retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property (retain, nonatomic) UIColor *underlineColorForSpelling;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) BOOL isSingleLineDocument;
@property (nonatomic) BOOL contentsIsSingleValue;
@property (nonatomic) BOOL hasDefaultContents;
@property (nonatomic) BOOL acceptsPayloads;
@property (nonatomic) BOOL acceptsEmoji;
@property (nonatomic) BOOL acceptsInitialEmojiKeyboard;
@property (nonatomic) BOOL acceptsDictationSearchResults;
@property (nonatomic) BOOL useAutomaticEndpointing;
@property (nonatomic) BOOL showDictationButton;
@property (nonatomic) BOOL forceEnableDictation;
@property (nonatomic) BOOL forceDisableDictation;
@property (nonatomic) BOOL forceSpellingDictation;
@property (nonatomic) BOOL forceDefaultDictationInfo;
@property (nonatomic) long long forceDictationKeyboardType;
@property (nonatomic) BOOL preferOnlineDictation;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) BOOL returnKeyGoesToNextResponder;
@property (nonatomic) BOOL acceptsFloatingKeyboard;
@property (nonatomic) BOOL forceFloatingKeyboard;
@property (nonatomic) struct UIEdgeInsets { double x0; double x1; double x2; double x3; } floatingKeyboardEdgeInsets;
@property (nonatomic) BOOL acceptsSplitKeyboard;
@property (nonatomic) BOOL displaySecureTextUsingPlainText;
@property (nonatomic) BOOL displaySecureEditsUsingPlainText;
@property (nonatomic) BOOL learnsCorrections;
@property (nonatomic) int shortcutConversionType;
@property (nonatomic) BOOL suppressReturnKeyStyling;
@property (nonatomic) BOOL useInterfaceLanguageForLocalization;
@property (nonatomic) BOOL deferBecomingResponder;
@property (nonatomic) BOOL enablesReturnKeyOnNonWhiteSpaceContent;
@property (copy, nonatomic) NSString *autocorrectionContext;
@property (copy, nonatomic) NSString *responseContext;
@property (retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property (nonatomic) BOOL disableInputBars;
@property (nonatomic) BOOL isCarPlayIdiom;
@property (nonatomic) long long textScriptType;
@property (nonatomic) BOOL loadKeyboardsForSiriLanguage;
@property (retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property (retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property (nonatomic) BOOL disablePrediction;
@property (nonatomic) BOOL hidePrediction;
@property (nonatomic) BOOL disableHandwritingKeyboard;
@property (nonatomic, getter=isDevicePasscodeEntry) BOOL devicePasscodeEntry;
@property (nonatomic) long long preferredKeyboardStyle;
@property (readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property (nonatomic) BOOL adjustsFontForContentSizeCategory;

+ (Class)_fieldEditorClass;
+ (BOOL)_isTextLayoutManagerEnabled;
+ (Class)_textPasteItemClass;
+ (BOOL)_wantsFadedEdges;

- (void)clearText;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })caretRectForPosition:(id)a0;
- (void)startAutoscroll:(struct CGPoint { double x0; double x1; })a0;
- (void)toggleBoldface:(id)a0;
- (BOOL)_hasCustomClearButtonImage;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })selectionRange;
- (void)replace:(id)a0;
- (id)positionFromPosition:(id)a0 inDirection:(long long)a1 offset:(long long)a2;
- (id)selectionRectsForRange:(id)a0;
- (void)decreaseSize:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })firstRectForRange:(id)a0;
- (void)pointerInteraction:(id)a0 willExitRegion:(id)a1 animator:(id)a2;
- (void)selectAll;
- (void)_becomeFirstResponder;
- (id)selectedText;
- (void)setContentVerticalAlignment:(long long)a0;
- (id)initWithCoder:(id)a0;
- (void)floatingContentView:(id)a0 isTransitioningFromState:(unsigned long long)a1 toState:(unsigned long long)a2;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)hasSelection;
- (id)_attributedStringForInsertionOfAttributedString:(id)a0;
- (void)setAttributes:(id)a0 range:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)insertText:(id)a0 alternatives:(id)a1 style:(long long)a2;
- (id)selectionView;
- (double)_maximumAlphaForLeadingView;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 withEvent:(id)a1;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)_isDisplayingShareViewController;
- (void)setHighlighted:(BOOL)a0;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)encodeRestorableStateWithCoder:(id)a0;
- (id)webView;
- (long long)baseWritingDirectionForPosition:(id)a0 inDirection:(long long)a1;
- (void)_define:(id)a0;
- (void)_installSelectGestureRecognizer;
- (void)endSelectionChange;
- (void)invalidateDropCaret;
- (long long)comparePosition:(id)a0 toPosition:(id)a1;
- (id)textLabel;
- (id)positionFromPosition:(id)a0 offset:(long long)a1;
- (void)endFloatingCursor;
- (void)drawRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)decodeRestorableStateWithCoder:(id)a0;
- (void)setContinuousSpellCheckingEnabled:(BOOL)a0;
- (id)textRangeFromPosition:(id)a0 toPosition:(id)a1;
- (void)validateCommand:(id)a0;
- (void)unmarkText;
- (void)copy:(id)a0;
- (void)_setHighlighted:(BOOL)a0 animated:(BOOL)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeForClearButton;
- (void)selectAll:(id)a0;
- (void)takeTraitsFrom:(id)a0;
- (void)setBaseWritingDirection:(long long)a0 forRange:(id)a1;
- (id)_proxyTextInput;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_availableTextRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forEditing:(BOOL)a1;
- (BOOL)hasMarkedText;
- (id)textInputTraits;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })borderRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_selectGestureChanged:(id)a0;
- (void)removeFromSuperview;
- (id)_encodableSubviews;
- (id)pointerInteraction:(id)a0 regionForRequest:(id)a1 defaultRegion:(id)a2;
- (void)beginSelectionChange;
- (id)methodSignatureForSelector:(SEL)a0;
- (BOOL)_canDrawContent;
- (void)_layoutLabels;
- (void)setSemanticContentAttribute:(long long)a0;
- (void)didAddTextAttachmentViews:(id)a0;
- (void)_insertAttributedTextWithoutClosingTyping:(id)a0;
- (void)_activateSelectionView;
- (BOOL)becomeFirstResponder;
- (BOOL)gestureRecognizerShouldBegin:(id)a0;
- (void)_updateLabel;
- (void)setClipsToBounds:(BOOL)a0;
- (BOOL)_shouldSendContentChangedNotificationsIfOnlyMarkedTextChanged;
- (void)insertDictationResult:(id)a0 withCorrectionIdentifier:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clearButtonRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)makeTextWritingDirectionLeftToRight:(id)a0;
- (void)_notifyDidBeginEditing;
- (void)endTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (BOOL)_delegateShouldChangeCharactersInTextStorageRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementString:(id)a1 delegateCares:(BOOL *)a2;
- (BOOL)_isDisplayingLookupViewController;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frameForDictationResultPlaceholder:(id)a0;
- (void)_pasteSessionDidFinish:(id)a0;
- (BOOL)keyboardInputChanged:(id)a0;
- (void)makeTextWritingDirectionRightToLeft:(id)a0;
- (void)willPresentEditMenuWithAnimator:(id)a0;
- (id)_pointerInteractionDelegate;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (void)toggleItalics:(id)a0;
- (BOOL)_delegateShouldBeginEditing;
- (void)setPaddingLeft:(float)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_suffixFrame;
- (void)didUpdateFocusInContext:(id)a0 withAnimationCoordinator:(id)a1;
- (struct CGSize { double x0; double x1; })_intrinsicSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (void)didLayoutTextAttachmentView:(id)a0 inFragmentRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)setSecureTextEntry:(BOOL)a0;
- (void)pasteAndMatchStyle:(id)a0;
- (void)setMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (id)_defaultFont;
- (BOOL)beginTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (void)setDisplaySecureTextUsingPlainText:(BOOL)a0;
- (void)setLabel:(id)a0;
- (void)removeInvisibleRange:(id)a0;
- (void)textContainerUsageDidChangeToSize:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_isDisplayingShortcutViewController;
- (BOOL)_delegateShouldScrollToVisibleWhenBecomingFirstResponder;
- (void)_addShortcut:(id)a0;
- (id)undoManager;
- (void)_didMoveFromWindow:(id)a0 toWindow:(id)a1;
- (BOOL)_textShouldFillFieldEditorHeight;
- (void)pasteItemProviders:(id)a0;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)a0 replacementText:(id)a1;
- (void)removeEmojiAlternatives;
- (id)backgroundColor;
- (void)_translate:(id)a0;
- (BOOL)_showsClearButtonWhenNonEmpty:(BOOL)a0;
- (double)_placeholderLabelAlphaForForegroundViewsAlpha:(double)a0;
- (float)paddingRight;
- (void)pressesEnded:(id)a0 withEvent:(id)a1;
- (id)clearButton;
- (void)cancelTrackingWithEvent:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })placeholderRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)continueTrackingWithTouch:(id)a0 withEvent:(id)a1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)keyboardInput:(id)a0 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 replacementText:(id)a2;
- (void)pointerInteraction:(id)a0 willEnterRegion:(id)a1 animator:(id)a2;
- (id)_preferredConfigurationForFocusAnimation:(long long)a0 inContext:(id)a1;
- (void)setKeyboardAppearance:(long long)a0;
- (id)textStylingAtPosition:(id)a0 inDirection:(long long)a1;
- (void)_gestureRecognizerFailed:(id)a0;
- (id)rangeWithTextAlternatives:(id *)a0 atPosition:(id)a1;
- (BOOL)_shouldOverrideEditingFont;
- (id)valueForKey:(id)a0;
- (id)positionWithinRange:(id)a0 farthestInDirection:(long long)a1;
- (void)_notifyDidEndEditing;
- (void)setProgress:(float)a0;
- (void)pressesCancelled:(id)a0 withEvent:(id)a1;
- (void)_promptForReplace:(id)a0;
- (long long)_suffixLabelTextAlignment;
- (void)setNeedsLayout;
- (float)paddingBottom;
- (BOOL)canResignFirstResponder;
- (id)_systemDefaultFocusGroupIdentifier;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (BOOL)_shouldSuppressSelectionHandles;
- (unsigned long long)_controlEventsForActionTriggered;
- (float)paddingLeft;
- (id)largeContentTitle;
- (void)traitCollectionDidChange:(id)a0;
- (BOOL)_shouldResignOnEditingDidEndOnExit;
- (void)_populateArchivedSubviews:(id)a0;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_applyHighlightedAnimated:(BOOL)a0;
- (void)addInvisibleRange:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setDisplaySecureEditsUsingPlainText:(BOOL)a0;
- (void)insertAttributedText:(id)a0;
- (BOOL)_shouldObscureInput;
- (void)encodeWithCoder:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })textRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x0; double x1; })a0 animated:(BOOL)a1;
- (double)_clearButtonMarginX;
- (long long)offsetFromPosition:(id)a0 toPosition:(id)a1;
- (void)_highlightedDidChangeAnimated:(BOOL)a0;
- (id)_textContainer;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_unobscuredSecureRange;
- (void)fieldEditorDidChangeSelection:(id)a0;
- (void)select:(id)a0;
- (void)paste:(id)a0;
- (long long)_blurEffectStyle;
- (void).cxx_destruct;
- (id)_placeholderColor;
- (id)characterRangeAtPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)_initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 textLayoutManagerEnabled:(BOOL)a1;
- (struct CGSize { double x0; double x1; })_clearButtonSize;
- (void)setPaddingRight:(float)a0;
- (void)setBackgroundColor:(id)a0;
- (void)_setTextColor:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_baselineLeftViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)canBecomeFocused;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })textContainerInset;
- (void)didMoveToWindow;
- (id)_defaultFocusEffect;
- (BOOL)_isDisplayingReferenceLibraryViewController;
- (BOOL)respondsToSelector:(SEL)a0;
- (void)_uninstallSelectGestureRecognizer;
- (void)replaceRange:(id)a0 withAttributedText:(id)a1;
- (void)removeAllGhostedRanges;
- (id)metadataDictionariesForDictationResults;
- (BOOL)resignFirstResponder;
- (id)_inputController;
- (void)_setEnabled:(BOOL)a0 animated:(BOOL)a1;
- (void)captureTextFromCamera:(id)a0;
- (id)_clearButtonImageForState:(unsigned long long)a0;
- (void)_tvUpdateAppearanceForUserInterfaceStyle;
- (void)makeTextWritingDirectionNatural:(id)a0;
- (id)_textCanvasView;
- (BOOL)_isDisplayingTextService;
- (BOOL)_delegateShouldClear;
- (id)_textLayoutController;
- (BOOL)_requiresKeyboardResetOnReload;
- (id)textInRange:(id)a0;
- (void)_showTextStyleOptions:(id)a0;
- (BOOL)canPerformAction:(SEL)a0 withSender:(id)a1;
- (id)_textStorage;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_selectionClipRect;
- (void)setPasswordRules:(id)a0;
- (BOOL)_shouldIgnoreBaseWritingDirectionChanges;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })insertFilteredText:(id)a0;
- (void)touchesCancelled:(id)a0 withEvent:(id)a1;
- (void)removeTextPlaceholder:(id)a0;
- (void)_didSetFont:(id)a0;
- (BOOL)drawTextInRectIfNeeded:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)setEnabled:(BOOL)a0;
- (float)paddingTop;
- (void)dealloc;
- (id)insertTextPlaceholderWithSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rightViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)forwardingTargetForSelector:(SEL)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderSelectionRectForWindow:(id)a0;
- (BOOL)canBecomeFirstResponder;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_rangeForSetText;
- (void)keyboardInputChangedSelection:(id)a0;
- (id)characterRangeByExtendingPosition:(id)a0 inDirection:(long long)a1;
- (void)_updateHelpMessageOverrideWithMessage:(id)a0;
- (void)_tvUpdateTextColor;
- (id)attributedTextInRange:(id)a0;
- (void)_deleteBackwardAndNotify:(BOOL)a0;
- (void)deleteBackward;
- (void)willDismissEditMenuWithAnimator:(id)a0;
- (void)cut:(id)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_textRangeForTextStorageRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (BOOL)_delegateShouldEndEditing;
- (void)layoutSubviews;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)increaseSize:(id)a0;
- (void)_receivedKeyboardDidShowNotification:(id)a0;
- (void)toggleUnderline:(id)a0;
- (void)willMoveToWindow:(id)a0;
- (void)fieldEditorDidChange:(id)a0;
- (void)_transliterateChinese:(id)a0;
- (id)valueForUndefinedKey:(id)a0;
- (void)touchesEnded:(id)a0 withEvent:(id)a1;
- (void)replaceRange:(id)a0 withText:(id)a1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)pressesBegan:(id)a0 withEvent:(id)a1;
- (void)didRemoveTextAttachmentViews:(id)a0;
- (BOOL)keyboardInputShouldDelete:(id)a0;
- (void)setAttributedMarkedText:(id)a0 selectedRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1;
- (void)_clearSelectionUI;
- (double)_baselineOffsetFromBottom;
- (Class)_placeholderLabelClass;
- (void)removeDictationResultPlaceholder:(id)a0 willInsertResult:(BOOL)a1;
- (void)addGhostedRange:(id)a0;
- (Class)_canvasViewClass;
- (BOOL)_shouldDetermineInterfaceStyleTextColor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_responderExternalTouchRectForWindow:(id)a0;
- (BOOL)allowsDraggingAttachments;
- (void)cancelAutoscroll;
- (void)tintColorDidChange;
- (void)_updateButtons;
- (void)insertText:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })leftViewRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)automaticallySelectedOverlay;
- (void)addTextAlternatives:(id)a0;
- (void)setIcon:(id)a0;
- (void)_share:(id)a0;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0;
- (id)pointerInteraction:(id)a0 styleForRegion:(id)a1;
- (id)closestPositionToPoint:(struct CGPoint { double x0; double x1; })a0 withinRange:(id)a1;
- (void)_scrollRangeToVisible:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 animated:(BOOL)a1;
- (long long)_preferredRenderingModeForPlaceholder;
- (BOOL)keyboardInput:(id)a0 shouldInsertText:(id)a1 isMarkedText:(BOOL)a2;
- (void)pressesChanged:(id)a0 withEvent:(id)a1;
- (id)_text;
- (id)_attributedText;
- (BOOL)_hasSuffixField;
- (struct CGSize { double x0; double x1; })_leftViewOffset;
- (void)_stopObservingFieldEditorScroll;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })clearButtonRect;
- (void)draggingStarted;
- (void)droppingStarted;
- (BOOL)_showsRightView;
- (BOOL)isAccessibilityElementByDefault;
- (unsigned long long)offsetInMarkedTextForSelection:(id)a0;
- (void)setLabelOffset:(float)a0;
- (void)__resumeBecomeFirstResponder;
- (id)_activityItemsConfigurationAtLocation:(struct CGPoint { double x0; double x1; })a0;
- (void)_addFieldEditorToView;
- (void)_addTextCanvasViewAdjustingFrame:(BOOL)a0;
- (void)_adjustFontForAccessibilityTraits:(BOOL)a0;
- (BOOL)_allowAssistanceInSubtree;
- (BOOL)_allowsChangingFirstResponderForFocusUpdateWithContext:(id)a0;
- (void)_animateNextHighlightChange;
- (void)_applicationResuming:(id)a0;
- (void)_attachFieldEditor;
- (double)_autolayoutSpacingAtEdge:(int)a0 forAttribute:(long long)a1 inContainer:(id)a2 isGuide:(BOOL)a3;
- (double)_autolayoutSpacingAtEdge:(int)a0 forAttribute:(long long)a1 nextToNeighbor:(id)a2 edge:(int)a3 attribute:(long long)a4 multiplier:(double)a5;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_availableTextRectExcludingButtonsForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_backgroundBounds;
- (void)_backgroundCoverStateDidChange;
- (id)_backgroundCoverView;
- (long long)_backgroundCoverViewMode;
- (id)_backgroundFillColor;
- (id)_backgroundProvider;
- (void)_backgroundProviderDidChange;
- (void)_backgroundProviderWillChange:(id)a0;
- (id)_backgroundStrokeColor;
- (double)_backgroundStrokeWidth;
- (id)_baselineCalculatorSourceCoordinateSpace;
- (BOOL)_blurEnabled;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_boundingRectForRange:(id)a0;
- (void)_clearButtonClicked:(id)a0;
- (double)_clearButtonPadX;
- (id)_contentBackdropView;
- (void)_contentCoverStateDidChange;
- (BOOL)_contentCoverUnsecuresText;
- (id)_contentCoverView;
- (long long)_contentCoverViewMode;
- (id)_contentFloatingContainerView;
- (id)_contentSnapshot;
- (id)_copyFont:(id)a0 newSize:(float)a1 maxSize:(float)a2;
- (void)_createInteractionAssistant;
- (long long)_currentTextAlignment;
- (id)_currentTextColor;
- (id)_dci_editingMenuForSuggestedActions:(id)a0 textRange:(id)a1;
- (id)_defaultPromptString;
- (void)_detachFieldEditor;
- (void)_detachFieldEditorDiscardingEdits:(BOOL)a0 animated:(BOOL)a1;
- (void)_detectCustomDrawing;
- (id)_dictationInterpretations;
- (void)_didAttachFieldEditor;
- (void)_didChangeSecureTextEntry;
- (void)_didDetachFieldEditor;
- (void)_didUpdateAfterDetachingFieldEditor;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 forLabel:(id)a1;
- (id)_editingProcessor;
- (id)_effectivePasteConfiguration;
- (void)_enabledDidChangeAnimated:(BOOL)a0;
- (void)_encodeBackgroundColorWithCoder:(id)a0;
- (double)_fieldEditorHeight;
- (id)_fieldEditorHost;
- (id)_fieldEditorHostAllowingCreation:(BOOL)a0;
- (BOOL)_finishResignFirstResponder;
- (double)_firstBaselineOffsetFromTop;
- (id)_fontInfoForBaselineSpacing;
- (BOOL)_forceDisplayOverridePlaceholder;
- (void)_forceObscureAllText;
- (double)_foregroundViewsAlpha;
- (double)_fullFontSize;
- (BOOL)_hasBaseline;
- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(long long *)a0;
- (BOOL)_hasFloatingFieldEditor;
- (BOOL)_hasFontInfoForVerticalBaselineSpacing;
- (BOOL)_heightShouldBeMini;
- (BOOL)_implementsEditMenu;
- (id)_implicitPasteConfigurationClasses;
- (BOOL)_inPopover;
- (BOOL)_inVibrantContentView;
- (void)_increaseContrastSettingChanged:(id)a0;
- (void)_initIncreasedContrastNotifications;
- (void)_initTextCanvasView;
- (void)_initTextLayoutController;
- (void)_initTextStorage;
- (void)_initialScrollDidFinish:(id)a0;
- (void)_invalidateAfterUpdatingEditingAttributes;
- (void)_invalidateAllGlyphsAndTextLayout;
- (void)_invalidateBackgroundProvider;
- (void)_invalidateBackgroundProviderForced:(BOOL)a0;
- (void)_invalidateCachedDefaultClearButtonImages;
- (void)_invalidateDefaultFont;
- (void)_invalidateDefaultFullFontSize;
- (void)_invalidateMetricsProvider;
- (void)_invalidatePasscodeStyleFromStyle:(BOOL)a0;
- (BOOL)_isFocused;
- (BOOL)_isPasscodeStyle;
- (BOOL)_isShowingPlaceholder;
- (BOOL)_isShowingPrefix;
- (BOOL)_isTextLayoutManagerEnabled;
- (long long)_keyboardAppearance;
- (void)_layoutContentAndExtras;
- (void)_layoutContentOnly;
- (void)_layoutFieldEditor;
- (void)_logWarningForMenuControllerUsage;
- (float)_marginTop;
- (float)_marginTopForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)_metricsProvider;
- (void)_metricsProviderDidChange;
- (void)_metricsProviderWillChange:(id)a0;
- (float)_newFontSize:(float)a0 maxSize:(float)a1;
- (void)_nonDestructivelyResignFirstResponder;
- (void)_noteThatKeyboardAppearanceHasChanged;
- (void)_notifySystemKeyboardOfAppearanceChange;
- (struct CGPoint { double x0; double x1; })_originForTextFieldLabel:(id)a0;
- (BOOL)_ownsInputAccessoryView;
- (BOOL)_partsShouldBeMini;
- (id)_placeholderView;
- (double)_preferredBackgroundCornerRadius;
- (Class)_preferredBackgroundProviderClass;
- (id)_preferredMetricsProvider;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_prefixFrame;
- (id)_previewRendererForRange:(id)a0 unifyRects:(BOOL)a1;
- (void)_propagateCuiProperties;
- (void)_removeFieldEditorAndHost;
- (void)_resetSelectionUI;
- (void)_resignFirstResponder;
- (BOOL)_restoreFirstResponder;
- (struct CGSize { double x0; double x1; })_rightViewOffset;
- (void)_sanitizeText:(id)a0;
- (struct CGPoint { double x0; double x1; })_scrollOffset;
- (void)_selectionMayChange:(id)a0;
- (void)_setActualLeftView:(id)a0;
- (void)_setActualLeftViewMode:(long long)a0;
- (void)_setActualRightView:(id)a0;
- (void)_setActualRightViewMode:(long long)a0;
- (void)_setAttributedPlaceholder:(id)a0;
- (void)_setAttributedText:(id)a0 setCaretSelectionAfterText:(BOOL)a1;
- (void)_setAttributedTextOnFieldEditor:(id)a0 setCaretSelectionAfterText:(BOOL)a1;
- (void)_setBackgroundCoverView:(id)a0;
- (void)_setBackgroundCoverViewMode:(long long)a0;
- (void)_setBackgroundFillColor:(id)a0;
- (void)_setBackgroundProvider:(id)a0;
- (void)_setBackgroundStrokeColor:(id)a0;
- (void)_setBackgroundStrokeWidth:(double)a0;
- (void)_setBlurEnabled:(BOOL)a0;
- (void)_setContentCoverUnsecuresText:(BOOL)a0;
- (void)_setContentCoverView:(id)a0;
- (void)_setContentCoverViewMode:(long long)a0;
- (void)_setDisableFocus:(BOOL)a0;
- (void)_setForceDisplayOverridePlaceholder:(BOOL)a0;
- (void)_setForegroundViewsAlpha:(double)a0;
- (void)_setFullFontSize:(id)a0;
- (void)_setLeadingPadding:(double)a0;
- (void)_setLeftViewOffset:(struct CGSize { double x0; double x1; })a0;
- (void)_setMetricsProvider:(id)a0;
- (void)_setNeedsStyleRecalc;
- (void)_setOverridePlaceholder:(id)a0 alignment:(long long)a1;
- (void)_setPlaceholder:(id)a0;
- (void)_setPrefix:(id)a0;
- (void)_setRightViewOffset:(struct CGSize { double x0; double x1; })a0;
- (void)_setSuffix:(id)a0 withColor:(id)a1;
- (void)_setTextInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 replacementText:(id)a1;
- (void)_setTrailingPadding:(double)a0;
- (void)_setVisualEffectViewEnabled:(BOOL)a0 backgroundColor:(id)a1;
- (void)_setVisualizesDebugRects:(BOOL)a0;
- (void)_setupDefaultStyleEffectConfiguration;
- (BOOL)_shouldAppendTextInViewDescription;
- (BOOL)_shouldEndEditing;
- (BOOL)_shouldEndEditingOnReturn;
- (BOOL)_shouldForwardMovementToFocusEngine:(long long)a0;
- (BOOL)_shouldShrinkPlaceholderToFitForAccessibility;
- (BOOL)_shouldUnobscureTextWithContentCover;
- (BOOL)_showsBackgroundCoverView;
- (BOOL)_showsClearButton:(BOOL)a0;
- (BOOL)_showsClearButtonWhenEmpty;
- (BOOL)_showsContentCoverView;
- (BOOL)_showsLeftView;
- (void)_sizeChanged:(BOOL)a0;
- (void)_syncTypingAttributesWithDefaultAttribute:(id)a0;
- (id)_systemBackgroundView;
- (long long)_systemDefaultFocusGroupPriority;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_textCanvasViewFrameIncludingContentInsetsFromFontsWhenNotContainedByFieldEditor;
- (id)_textGeometry;
- (id)_textInputViewForAddingGestureRecognizers;
- (BOOL)_textNeedsSanitizing:(id)a0;
- (BOOL)_textShouldUseVibrancy;
- (struct CGSize { double x0; double x1; })_textSize;
- (struct CGSize { double x0; double x1; })_textSizeUsingFullFontSize:(BOOL)a0;
- (id)_textStorageTextColor;
- (BOOL)_tvHasFloatingFieldEditor;
- (id)_tvTypingAttributes;
- (void)_tvUpdateContentBackdropView;
- (id)_uiktest_placeholderLabelColor;
- (BOOL)_uiktest_shouldDisableTextColorUpdateOnTraitCollectionChange;
- (id)_uiktest_tvCustomTextColor;
- (BOOL)_uiktest_tvUseVibrancy;
- (void)_updateAutosizeStyleIfNeeded;
- (void)_updateBaselineInformationDependentOnBounds;
- (void)_updateBaselineInformationDependentOnBoundsAllowingInvalidation:(BOOL)a0;
- (void)_updateForTintColor;
- (void)_updateLabelAppearance;
- (void)_updatePlaceholderPosition;
- (void)_updateSelectionGestures;
- (void)_updateSuffix:(id)a0;
- (void)_updateTextEffectsConfigurationIfNeeded;
- (BOOL)_useGesturesForEditableContent;
- (long long)_userInterfaceStyle;
- (id)_viewForLoweringBaselineLayoutAttribute:(int)a0;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_visibleRangeWithLayout:(BOOL)a0;
- (BOOL)_visualEffectViewEnabled;
- (BOOL)_visualizesDebugRects;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (void)_willAttachFieldEditor;
- (void)_willUpdateAfterDetachingFieldEditor;
- (void)_windowBecameKey;
- (void)_windowResignedKey;
- (id)actualFont;
- (double)actualMinimumFontSize;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })adjustedCaretRectForCaretRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)becomeDropResponder;
- (BOOL)canBecomeDropResponder;
- (struct CGSize { double x0; double x1; })clearButtonOffset;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x0; double x1; })a0;
- (struct CGPoint { double x0; double x1; })constrainedPoint:(struct CGPoint { double x0; double x1; })a0;
- (void)createPlaceholderIfNecessary;
- (id)createPlaceholderLabelWithFont:(id)a0 andTextAlignment:(long long)a1;
- (id)createTextLabelWithTextColor:(id)a0;
- (id)customOverlayContainer;
- (void)decodeRestorableStateWithCoder:(id)a0 includingSelectedTextAndDisplayedViewControllers:(BOOL)a1;
- (id)defaultClearButtonImageForState:(unsigned long long)a0;
- (void)didGenerateCancelPreview:(id)a0;
- (void)disableClearsOnInsertion;
- (id)documentFragmentForPasteboardItemAtIndex:(long long)a0;
- (void)draggingFinished:(id)a0;
- (void)drawPlaceholderInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawPrefixInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawSuffixInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)droppingFinished;
- (id)editMenuForTextRange:(id)a0 suggestedActions:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })editRect;
- (void)encodeRestorableStateWithCoder:(id)a0 includingSelectedTextAndDisplayedViewControllers:(BOOL)a1;
- (BOOL)fieldEditor:(id)a0 shouldInsertText:(id)a1 replacingRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })fieldEditor:(id)a0 willChangeSelectionFromCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a1 toCharacterRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2;
- (BOOL)fieldEditorShouldExtendCaretHeight:(id)a0;
- (void)finishedSettingPlaceholder;
- (void)finishedSettingTextOrAttributedText;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })iconRect;
- (void)insertText:(id)a0 style:(long long)a1 alternatives:(id)a2;
- (void)interactionTintColorDidChange;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (void)layoutTilesNow;
- (void)performCancelAnimations;
- (void)resignDropResponderWithDropPerformed:(BOOL)a0;
- (void)sanitizeAttributedText:(id)a0;
- (void)scrollTextFieldToVisibleIfNecessary;
- (id)selectedAttributedText;
- (void)setAutoresizesTextToFit:(BOOL)a0;
- (void)setBecomesFirstResponderOnClearButtonTap:(BOOL)a0;
- (void)setClearButtonOffset:(struct CGSize { double x0; double x1; })a0;
- (void)setClearButtonStyle:(long long)a0;
- (void)setFont:(id)a0 fullFontSize:(id)a1;
- (void)setFont:(id)a0 fullFontSize:(id)a1 ambientOnly:(BOOL)a2;
- (void)setPaddingTop:(float)a0 paddingLeft:(float)a1;
- (void)setSelectionRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0;
- (void)setTextCentersHorizontally:(BOOL)a0;
- (void)setTextCentersVertically:(BOOL)a0;
- (id)willGenerateCancelPreview;

@end
