@class NSURL, PKPrintSettings, UIPrintFormatter, UIWindow, UIWindowScene, PKPrinter, UIPrintPaper, UIPrintPageRenderer, NSSet, NSString, NSMutableSet, NSOperationQueue, UIPrintPanelViewController, NSArray, UIPrintingProgress, UIPrintInfo;
@protocol UIPrintInteractionControllerActivityDelegate, UIPrintInteractionControllerDelegate;

@interface UIPrintInteractionController : NSObject {
    unsigned long long _backgroundTaskIdentifier;
    NSOperationQueue *_previewQueue;
    id _temporaryRetainCycle;
    long long _currentRenderingQuality;
    UIWindow *_passwordAlertWindow;
    NSURL *_nupFileURL;
}

@property (class, readonly, nonatomic, getter=isPrintingAvailable) BOOL printingAvailable;
@property (class, readonly, nonatomic) NSSet *printableUTIs;
@property (class, readonly, nonatomic) UIPrintInteractionController *sharedPrintController;

@property (copy) id /* block */ _completionHandler;
@property BOOL printStateActive;
@property (nonatomic) long long pageCount;
@property (retain, nonatomic) NSArray *pageRanges;
@property (retain, nonatomic) PKPrinter *printer;
@property (retain, nonatomic) UIWindowScene *hostingWindowScene;
@property long long pageCountWithRanges;
@property (retain) NSMutableSet *previewStates;
@property (retain) NSURL *tempPreviewFileURL;
@property long long currentPage;
@property struct _NSRange { unsigned long long location; unsigned long long length; } currentRange;
@property long long pagesDrawn;
@property (retain) UIPrintPanelViewController *printPanelViewController;
@property (retain) UIPrintingProgress *printingProgress;
@property (retain) PKPrintSettings *printSettings;
@property (retain) UIPrintInfo *activePrintInfo;
@property int printInfoState;
@property BOOL supressNotifyDismissed;
@property (retain) UIPrintPageRenderer *formatterRenderer;
@property BOOL manualPrintPageEnabled;
@property (retain) NSURL *saveFileURL;
@property BOOL showPrintingProgress;
@property (retain) NSString *pdfPassword;
@property (retain, nonatomic) UIPrintPaper *paper;
@property (nonatomic) BOOL isContentManaged;
@property (weak, nonatomic) id<UIPrintInteractionControllerActivityDelegate> printActivityDelegate;
@property (nonatomic) BOOL showsScalingFactor;
@property (retain, nonatomic) UIPrintInfo *printInfo;
@property (weak, nonatomic) id<UIPrintInteractionControllerDelegate> delegate;
@property (nonatomic) BOOL showsPageRange;
@property (nonatomic) BOOL showsNumberOfCopies;
@property (nonatomic) BOOL showsPaperSelectionForLoadedPapers;
@property (nonatomic) BOOL showsPaperOrientation;
@property (readonly, nonatomic) UIPrintPaper *printPaper;
@property (retain, nonatomic) UIPrintPageRenderer *printPageRenderer;
@property (retain, nonatomic) UIPrintFormatter *printFormatter;
@property (copy, nonatomic) id printingItem;
@property (copy, nonatomic) NSArray *printingItems;

+ (BOOL)canPrintData:(id)a0;
+ (BOOL)canPrintURL:(id)a0;

- (BOOL)_canShowColor;
- (void)dismissAnimated:(BOOL)a0;
- (id)init;
- (BOOL)_canShowCopies;
- (void)_ensurePDFIsUnlockedFirstAttempt:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_generatePDFForQuickLookCompletion:(id /* block */)a0;
- (BOOL)_setupPrintPanel:(id /* block */)a0;
- (void)_updateCutterBehavior;
- (void)_printItemAsync:(id)a0 completionHandler:(id /* block */)a1;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })_fullPagesRange;
- (void)_cancelPreviewQueue:(BOOL)a0 completionHandler:(id /* block */)a1;
- (void)_preparePrintInfo;
- (void)_cancelManualPrintPage;
- (id)_convertToPrintableItem:(id)a0;
- (id)_getChosenPaperFromDelegateForPaperList:(id)a0;
- (void)_startPrinting;
- (void)_endPrintJobWithAction:(long long)a0 error:(id)a1;
- (BOOL)savePDFToURL:(id)a0 showProgress:(BOOL)a1 hostingScene:(id)a2 completionHandler:(id /* block */)a3;
- (BOOL)_canShowPreview;
- (void)_updateRendererWithQuality:(long long)a0;
- (void)_updatePrintInfoWithAnnotations;
- (BOOL)_canShowPaperList;
- (BOOL)presentFromRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 animated:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)_enableManualPrintPage:(BOOL)a0;
- (struct CGSize { double x0; double x1; })_printablePDFURLSize:(id)a0;
- (BOOL)needRedrawWithNUp;
- (void)_updatePrintPaper;
- (BOOL)_setupPrintPanel:(id /* block */)a0 forPDFGenerationOnly:(BOOL)a1;
- (void)_cancelAllPreviewGeneration;
- (BOOL)_canShowStaple;
- (BOOL)_canShowAnnotations;
- (BOOL)_canShowPunch;
- (void)_printPage;
- (id)_printPageRenderer:(id)a0;
- (BOOL)presentAnimated:(BOOL)a0 completionHandler:(id /* block */)a1;
- (id)_printingItemPrintablePDFURL;
- (void).cxx_destruct;
- (void)_updatePageCount;
- (void)_generatePrintPreview:(id /* block */)a0;
- (BOOL)presentAnimated:(BOOL)a0 hostingScene:(id)a1 completionHandler:(id /* block */)a2;
- (void)_drawPageWithItem:(id)a0 toContext:(struct CGContext { } *)a1;
- (void)_generatePDFInRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 useFullRange:(BOOL)a1 withQuality:(long long)a2 completion:(id /* block */)a3;
- (BOOL)savePDFToURL:(id)a0 showProgress:(BOOL)a1 completionHandler:(id /* block */)a2;
- (id)_newPDFURLWithPath:(id)a0 isContentManaged:(BOOL)a1;
- (BOOL)_canShowScaling;
- (struct CGSize { double x0; double x1; })_printablePDFDataSize:(id)a0;
- (void)_setPrintInfoState:(int)a0;
- (void)_printPanelDidDismissWithAction:(long long)a0;
- (BOOL)_canPrintPDFData:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_mediaRect;
- (void)_completePrintPageWithError:(id)a0;
- (id)redrawPDFwithPageRange:(id)a0;
- (BOOL)_canShowOrientation;
- (BOOL)_canShowPageRange;
- (void)_generatePDFWithNupForPrintingCompletion:(id /* block */)a0;
- (struct CGContext { } *)_newSaveContext:(id)a0 withMediaRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (BOOL)printToPrinter:(id)a0 completionHandler:(id /* block */)a1;
- (BOOL)_canShowLayout;
- (void)dealloc;
- (void)_printPageWithDelay:(double)a0;
- (void)_manualPrintPage;
- (id)_tempFilePath;
- (id)_paperForPDFItem:(id)a0 withDuplexMode:(long long)a1;
- (void)_printPanelDidPresent;
- (void)_generatePrintPreviewWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 useFullRange:(BOOL)a1 completion:(id /* block */)a2;
- (BOOL)_canPrintPDFURL:(id)a0;
- (double)_getCutLengthFromDelegateForPaper:(id)a0;
- (void)_addPDFWithData:(id)a0 toContext:(struct CGContext { } *)a1;
- (void)_cleanPrintState;
- (struct CGSize { double x0; double x1; })_printItemContentSize;
- (BOOL)_isPageCancelled:(id)a0;
- (id)_paperForContentType:(long long)a0;
- (BOOL)_canShowDuplex;
- (BOOL)_pageRendererAvailable;
- (BOOL)presentFromBarButtonItem:(id)a0 animated:(BOOL)a1 completionHandler:(id /* block */)a2;
- (id)drawPagesWithRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a0 withExistsURL:(id)a1 withPreviewState:(id)a2;
- (void)removeFileAtURL:(id)a0;
- (BOOL)_presentAnimated:(BOOL)a0 hostingScene:(id)a1 completionHandler:(id /* block */)a2;
- (BOOL)_fullRangeNeeded;
- (id)_currentPrintInfo;
- (BOOL)_printingItemIsReallyTallPDF;
- (void)_printPanelWillDismissWithAction:(long long)a0;
- (BOOL)savePDFToURL:(id)a0 completionHandler:(id /* block */)a1;
- (id)rendererToUse;

@end
